
[
 :html-file { :filename "navigation.html" :home-active "active" }


 :html-hiccup [:div
               [:h1 "Explainer - a simple program for explaining things"]
               [:br]

               [:h3 "Rational: Why was this tool created?"]

               [:p "Does the world really need another static site generator?  Probably not, but here we go..." ]

               [:p "As a BE engineer, I wanted to document/discuss the flow
               of information in the system, showing multiple plantuml
               diagrams and swagger endpoints in a single easy to
               review/update/discuss document." ]

               [:h3 "Why would you use it?"]

               [:p
               "To create and share some documenation about how
              something works.  You can explain something using html
              directly - but explainer provides more content
              types (ie. plantuml, dot, markdown.)  Since Explainer is
              fairly simple, a clojure developer can adapt it to
              unforseen needs."
]

              [:p "There are other more complicated systems out there
              for generating html pages, " [:a
              {:href "https://asciidoctor.org/"} "asciidoctor"] "
              looked cool, but also complicated.  Also consider " [:a
              {:href "https://github.com/nextjournal/clerk" } "Clerk"
              ]] ]


 :markdown "### Assumptions / Constraints

- you dont mind editing edn using your own editor
- you will likey work with an 'editor window' paired to a 'browser window'
- your audience can read the page in a browser
- the edn file always has [chunk-type chunk-data] so an even number of elements.
- the chunk types do not nest inside eachother, there is only 1 level of depth
- you will probably be missing something and want to create your own chunk type
"

 :html-hiccup [:div
               [:br]
               [:h3 "How does it work?"]

               [:p "Explainer reads edn files and transforms them into html files.  Each edn file is a list of content of various types called chunks." ]
               
               [:p
                "You create an input file (ie index.edn) " [:a
               {:href "https://learnxinyminutes.com/docs/edn/"} "EDN
               data format"] ", then execute the 'explainer' program.
               It walks through each chunk of the input file and
               produces html for each section. "]

               [:p "For plantUML sections, the plantUML api is invoked
               and the diagram is generated.  See " [:a
               {:href "https://plantuml.com/"} "https://plantuml.com/"] " The
               easy way to create a plantuml diagram is to find a good
               diagram on the plantuml site, then click on it.  You
               can then develop the diagram in the cloud, and when
               finished copy the text into explainer"]

               [:p "For example, Using this as the 'input/index.edn' file,"]
               [:span.ex-block 
                [:pre
                 "[ 
      ;; chunk type       chunk-data
      :html-hiccup        [:div [:h3 \"Authentication Example\" ] [:br] [:br] ] ]
      :plantuml-file      \"diagram.pu\"
]"]]
               [:br]
               "The following output (docs/index.html) is generated;"
               [:br]
               [:br]]
 
 :html "<div class='ex-block'>"
 ;; chunk type   chunk-data
 :html-hiccup    [:div [:h3 "Authentication Example" ] [:br] ]
 :plantuml-file  "diagram.pu"
 :html "<br></div>"

 :resource "typicalworkflow.png"
 
 :html-hiccup [:div [:br] [:h3 "Chunk Types" ]


               [:h4 ":html" ]
               "A raw html section.  The gold standard for displaying content in a browser."
               [:br]
               [:span.ex ":html \"&lt;b>cat&lt;/b>\""]

 
               [:h4 ":html-hiccup" ]
               "Hiccup is a representation of html in clojure's edn format"
               [:br]
               [:span.ex ":html-hiccup [:h1 \"cat\" ]" ]

               [:h4 ":js-file" ]
               "Inserts a js file at the current location in the document"
               [:br]
               [:span.ex ":js-file \"myjs.fo\""]

               [:h4  ":plantuml-file" ]
               "Describes the chunk as a plantuml diagram.  The argument of the chunk type is the file.  The file contains a plantuml text input for a diagram.  explainer uses the plantuml library to generate the image and inserts the html to render the image on the page"
               [:br]
               [:span.ex ":plantuml-file \"alice-bob.pu\"" ]

               [:h4 ":dot-file"]
               "A dot file is a variation on the plantuml-file.  The input is a graphvis file. See " 
               [:a {:href "https://renenyffenegger.ch/notes/tools/Graphviz/examples/index"} "Graphvis (dot) examples"] " and " [:a { :href "https://graphviz.org/" } "https://graphviz.org/" ]
               [:br]
               [:span.ex ":dot-file \"figure.dot\"" ]

               [:h4 ":resource" ]
               "Resource file needed for a page.  Typically a png or
jpg file which is referenced in the :html or :html-provider.  This is
needed to tell explainer to copy the resource from the input directory
to the output directory"
               [:br]
               [:span.ex ":resource \"cat.jgp\""] 

               [:h4 ":swagger-file" ]
               "Provide a swagger yaml-file and it inserts the API"
               [:br]
               [:span.ex ":swagger-file  \"my-swagger-file.yml\"" ]

               
               [:h4 ":markdown" ]
               "Provide markdown in the document. You can experiment with markdown at " [:a { :href "https://rawgit.com/yogthos/markdown-clj/master/demo/markdown.html"} "Yogthos markdown site" ]
               [:br]
               [:span.ex ":markdown-file  \"# Boo\nHalloween involves candy." ]


               [:h4 ":markdown-file" ]
               "Provide a markdown file and insert it's contents as html"
               [:br]
               [:span.ex ":markdown-file  \"my-markdown-file.md\"" ]

               
               [:br]
               [:br]
               [:h3 "Install as local command"]
               [:div "The install script (install.sh) puts two files in $HOME/bin.  <ol>"
                "<li>A shell executable named 'explainer'"
                "<li>A uberjar used by the script.</ol>"]
               [:br]
               [:h3 "Quick Example"]
               [:pre
                "$ ./install.sh # installs to $HOME/bin/explainer \n"
                "$ mkdir -p ~/cow/input && cd ~/cow \n"
                "$ echo ' [ :html \"&lt;h1>Goose&lt;/h1>\" ] ' > input/doc.edn \n"
                "$ explainer && google-chrome docs/index.html  "]

               [:br]

               [:h3 "Watch Mode"]
               [:p "When developing a document, using watch mode can
               be helpful.  Watch mode is used by having a browser
               window along side of an editor window with explainer
               running in watch mode.  Everytime you save in the
               editor, explainer updates the document. " ]
               [:pre "$ explainer -w"]
               [:img {:src "typicalworkflow.png" :width 600}]

               [:br]
               [:br]

               [:p "When running in watch mode, explainer checks for
               changes three times a second.  When a timestamp on an
               input file changes, explainer regenerates the output. "]

               [:p "The output page has a small bit of injected
               javascript which checks to see if the document version
               has changed.  If the version has changed, the page is
               reloaded.  The endpoint for checking the version is;"]
               ]

 :swagger-file "reloader.yml"

 :html-hiccup [:div

               [:br]
               [:br]
               [:h3 "Command Line Usage"]
               [:pre "Explainer\n"
                "\n"
                "Usage:\n"
                "  explainer [options] \n"
                "  explainer --help\n"
                "  explainer --version\n"
                "\n"
                "Options:\n"
                "  -o <output-dir>, --output-dir <output-dir>  Where to write the output files. [default: docs]\n"
                "  -i <input-dir>, --input-dir <input-dir>     Where to write the input files. [default: input]\n"
                "  -w --watch    Wait and watch for input file changes, and reflect them to the output file.\n"
                "  -v --verbose  Verbose output.\n"
                "  -d --debug    Debug output.\n"
                "  -h --help     Show this screen.\n"
                "  --version     Show version.\n"
                "\n"]
               ]

 :markdown "#Enjoy!"

 :html "\"All models are wrong, but some are useful.\" --George Box"

 :html "</div></html>"

 ]

