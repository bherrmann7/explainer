
[
 ;; This adds bootstrap to our page.  I wonder if this could be an alias.  :boostrap-3  :tailwind
 :html-hiccup [:link {:href "https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" :rel "stylesheet" :integrity "sha384-1BmE4kWBq78iYhFldvKuhfTAU6auU8tT94WrHftjDbrCEXSU1oBoqyl2QvZ6jIW3" :crossorigin "anonymous"}]

 :html "<style>
.ex {
  background-color: lightblue;
  margin: 10px;
  padding: 10px;
 display: inline-block;
}
.ex-block {
  background-color: lightblue;
  margin: 15px;
  padding: 25px;
 display: inline-block;
}</style>"


  ;; Using html here, because it can be "unclosed" and thus wrap the following chunks inside the page.   Where as hiccup has to be closed (valid edn)
 :html "<div style='padding: 30px'>"

 :html-hiccup [:div
               [:h1 "Explainer - a simple program for explaining things"]
               [:br]
               [:h3 "Why would you use it?"]

               "To generate some quick documenation about how
              something works. You can simply use html - but explainer
              provides more content types.  There are other more
              complicated systems out there for generating html
              pages, " [:a
              {:href "https://asciidoctor.org/"} "asciidoctor"] "
              looked cool, but also complicated.   Also consider " [:a
              {:href "https://github.com/nextjournal/clerk" } "Clerk" ]

               [:br]
               [:br]
               [:h3 "How does it work?"]

               [:p "Essentially you create content 'chunks' and
               explainer packages them into an html file for sharing.
               The chunks can be of several different types."
                ]
               
               [:p
                "You create an input file (ie doc.edn) " [:a
               {:href "https://learnxinyminutes.com/docs/edn/"} "EDN
               data format"] ", then execute the 'explainer' program.
               It walks through each block of the input file and
               produces output for each section. "]

               [:p "For plantUML sections, the plantUML api is invoked
               and the diagram is generated.  See " [:a
               {:href "https://plantuml.com/"} "https://plantuml.com/"] "The
               easy way to create a plantuml diagram is to find a good
               diagram on the plantuml site, then click on in.  You
               can then develop the diagram in the cloud, and when
               finished copy the text into explainer"]

               [:p "For example, Using this as the 'doc.edn' file,"]
               [:span.ex-block 
                [:pre
                 "[ 
      :html-hiccup [:div [:h3 \"Authentication Example\" ] [:br] [:br] ] ]
      :plantuml-file \"diagram.pu\"
]"]]

               [:br]
               "The following output is generated;"
               [:br]
               [:br]]
 
 :html "<div class='ex-block'>"
 :html-hiccup [:div [:h3 "Authentication Example" ] [:br] ]
 :plantuml-file "diagram.pu"
 :html "<br></div>"

 :resource "typicalworkflow.png"
 
 :html-hiccup [:div [:br] [:h3 "Chunk Types" ]


               [:h4 ":html" ]
               "A raw html section.  The gold standard for displaying content in a browser."
               [:br]
               [:span.ex ":html \"&lt;b>cat&lt;/b>\""]

 
               [:h4 ":html-hiccup" ]
               "Hiccup is a representation of html in clojure's edn format"
               [:br]
               [:span.ex ":html-hiccup [:h1 \"cat\" ]" ]

               [:h4 ":js-file" ]
               "Inserts a js file at the current location in the document"
               [:br]
               [:span.ex ":js-file \"myjs.fo\""]

               [:h4  ":plantuml-file" ]
               "Describes the chunk as a plantuml diagram.  The argument of the chunk type is the file.  The file contains a plantuml text input for a diagram.  explainer uses the plantuml library to generate the image and inserts the html to render the image on the page"
               [:br]
               [:span.ex ":plantuml-file \"alice-bob.pu\"" ]

               [:h4 ":dot-file"]
               "A dot file is a variation on the plantuml-file.  The input is a graphvis file. See " 
               [:a {:href "https://renenyffenegger.ch/notes/tools/Graphviz/examples/index"} "Graphvis (dot) examples"] " and " [:a { :href "https://graphviz.org/" } "https://graphviz.org/" ]
               [:br]
               [:span.ex ":dot-file \"figure.dot\"" ]

               [:h4 ":resource" ]
               "Resource file needed for a page.  Typically a png or
jpg file which is referenced in the :html or :html-provider.  This is
needed to tell explainer to copy the resource from the input directory
to the output directory"
               [:br]
               [:span.ex ":resource \"cat.jgp\""] 

               [:h4 ":swagger-file" ]
               "Provide a swagger yaml-file and it inserts the API"
               [:br]
               [:span.ex ":swagger-file  \"my-swagger-file.yml\"" ]

               [:br]
               [:br]
               [:h3 "Install as local command"]
               [:div "The install script (install.sh) puts two files in $HOME/bin.  <ol>"
                "<li>A shell executable named 'explainer'"
                "<li>A uberjar used by the script.</ol>"]
               [:br]
               [:h3 "Quick Example"]
               [:pre
                "$ ./install.sh # installs to $HOME/bin/explainer \n"
                "$ mkdir -p ~/cow/input && cd ~/cow \n"
                "$ echo ' [ :html \"&lt;h1>Goose&lt;/h1>\" ] ' > input/doc.edn \n"
                "$ explainer && google-chrome docs/index.html  "]

               [:br]

               [:h3 "Watch Mode"]
               [:p "When developing a document, using watch mode can
               be helpful.  Typically means having
               browser (ie. chrome) along side of an
               editor (ie. emacs) with explainer running in watch
               mode.  Everytime you save in the editor, explainer
               updates the document. " [:pre "$ explainer -w"]]
               [:img {:src "typicalworkflow.png" :width 600}]

               [:br]
               [:br]

               [:p "When running in watch mode, explainer checks for
               changes three times a second.  When a timestamp on an
               input file changes, explainer regenerates the output. "]

               [:p "The output page has a small bit of injected
               javascript which checks to see if the document version
               has changed.  If the version has changed, the page is
               reloaded.  The endpoint for checking the version is;"]
               ]

 :swagger-file "reloader.yml"

 :html-hiccup [:div

               [:br]
               [:br]
               [:h3 "Command Line Usage"]
               [:pre "Explainer\n"
                "\n"
                "Usage:\n"
                "  explainer [options] \n"
                "  explainer --help\n"
                "  explainer --version\n"
                "\n"
                "Options:\n"
                "  -o <output-dir>, --output-dir <output-dir>  Where to write the output files. [default: docs]\n"
                "  -i <input-dir>, --input-dir <input-dir>     Where to write the input files. [default: input]\n"
                "  -w --watch    Wait and watch for input file changes, and reflect them to the output file.\n"
                "  -v --verbose  Verbose output.\n"
                "  -d --debug    Debug output.\n"
                "  -h --help     Show this screen.\n"
                "  --version     Show version.\n"
                "\n"]

               [:h3 "TODO"]
               [:ul
                [:li "add markdown - inline and file"]
                [:li "add a doc multi method for each explainer command which returns providers? (turtles all the way down)"]
                [:li "create video demoing explainer - kind of the ultimate fail for something which is supposed to explain things, but videos work."]
                [:li "consider aliases, for example " [:code ":bootstrap 3"] " adds a boostrap thing from ~/.explainer-aliases and/or have built-in aliases."]
               ]

               [:h3 "Perhaps / Maybe / Ideas"]
               [:ul
                [:li "consider renaming the 'docs' directory to 'public_html' or 'www' or make the current dir the one with a *.edn file in it"]
                [:li "handle generating multipage docs, :page 'development.edn'"]
                [:li "Better error handling - indicate where the issue is (right now there is a blanket something went wrong)"]
                [:li "consider using jtidy to clean up output"]
                [:li "consider indenting the doc.edn doc"]]]

 :html "Enjoy!<br>-bob</div>"

 ]

